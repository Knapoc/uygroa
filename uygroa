#!/bin/sh
# uygroa
Revision=7
# uygroa is a fork of ublockr (version 4) by Toast and Jacob Salmela (Pi-Hole) formerly published under GPL 3.0 https://www.snbforums.com/threads/ublockr-a-minimalists-approach-to-adblocking.31683/
# Licensed under GPL 3.0
# Script made for router supporting Entware
cfg=/opt/etc/uygroa.cfg                                               # edit this if you want your cfg in a different directory
SELF=$(basename $0)                                                   #uses the same name as the file
UPDATE_BASE=https://raw.githubusercontent.com/Knapoc/uygroa/master    #dont link directly to file link to the folder
UPDATE_SELF=${UPDATE_SELF:-1}
ONLINE_REV=$(wget --no-check-certificate -q -O - $UPDATE_BASE/$SELF | grep -oE "Revision\=[0-9]{1,3}" | awk '{print substr($1,10)}')

show_version () {
echo "your current version is $Revision"
}

self_updater () {
        logger -s -t uygroa-updater "Performing self-update to Version $ONLINE_REV."
if      ! wget --quiet --output-document="$0.tmp" $UPDATE_BASE/$SELF ;
then    logger -s -t uygroa-updater "Failed downloading new version!"
        logger -s -t uygroa-updater "File requested: $UPDATE_BASE/$SELF"
        exit 1
fi
OCTAL_MODE=$(stat -c '%a' $0)
    case ${OCTAL_MODE:--1} in
        -[1] )          echo "Failed: Error : OCTAL_MODE was empty"; exit 1 ;;
        777|775|755 )   echo "OCTAL mode set:${OCTAL_MODE}" ;;
        * )             echo "Failed: Error in OCTAL_MODEs, found value=${OCTAL_MODE}" exit 1 ;;
    esac
if      ! chmod $OCTAL_MODE $0.tmp ;
then    logger -s -t uygroa-updater "Error on chmod $OCTAL_MODE %0.tmp from $UPDATE_BASE/$SELF, can't continue"
        exit 1
fi
cat > /tmp/updatescript.sh << EOF
#!/bin/sh
if mv "$0.tmp" "$0";
then    logger -s -t uygroa-updater "Update complete."
        exec env UPDATE_SELF=0 /bin/sh "$0"
        rm \$0
else    logger -s -t uygroa-updater "Update failed."
fi
EOF
        echo "Inserting update process..."
            exec /bin/sh /tmp/updatescript.sh; rm /tmp/updatescript.sh
}

check_update () {
if [ ${UPDATE_SELF} -ne 0 ] && [ "$ONLINE_REV" -gt "$Revision" ]
then self_updater
  else
    logger -s -t uygroa "No update needed. You're running version $Revision. The latest online version is $ONLINE_REV."
fi }

if [ -f $cfg ]; then logger -s -t uygroa "Reading uygroa config." >&2
else logger -s -t uygroa "No configuration found. Exiting." ; exit 0 ;fi
source $cfg

# SET APPCHECK
if [ -z "$(which opkg)" ]; then logger -s -t uygroa "no package manager found"; exit 0; else
if [ -z "$(opkg list-installed | grep wget)" ]; then opkg install wget; fi
if [ -z "$(opkg list-installed | grep ca-certificates)" ]; then opkg install ca-certificates; fi
if [ -z "$(opkg list-installed | grep grep)" ]; then opkg install grep; fi
if [ -z "$(which stat)" ]; then opkg install coreutils-stat; fi

case $(grep -oE 'OpenWrt' /proc/version) in
  OpenWrt) ;;
  *) if [ -z "$(which pixelserv-tls)" ]; then opkg install pixelserv-tls; fi ;;
 esac; fi

 # END APPCHECK
case $(grep -oE 'merlin|padavan|OpenWrt' /proc/version) in
  merlin)    path=$asuswrt_path>&2; configuration=$asuswrt_dnsmasq >&2; iface=$nic ;;
  padavan)   path=$padavan_path >&2; configuration=$padavan_dnsmasq >&2; iface=$nic ;;
  OpenWrt)   path=$openwrt_path >&2; iface=$nic ;;
  *)         path=$other_path >&2; configuration=$other_dnsmasq >&2; iface=$nic ;;
esac

# SET VARIABLES
pix_v4=`echo $(ifconfig $iface | awk '/inet addr/{print substr($2,6)}')`
pix_v6=`echo $(ip addr show dev $iface | sed -e's/^.*inet6 \([^ ]*\)\/.*$/\1/;t;d')`
regexp_ip=`echo "\b([0-9]{1,3}\.){3}[0-9]{1,3}\s+(([a-zA-Z0-9]+)(\-|\|_|\.)){1,8}[a-zA-Z]{2,4}((\.)[a-zA-Z]{2,4}){0,1}\b"`
regexp_no=`echo "\b(([a-zA-Z0-9]+)(\-|\|_|\.)){1,8}[a-zA-Z]{2,4}((\.)[a-zA-Z]{2,4}){0,1}\b"`
# END VARIABLES

check_online () {
while ! ping -q -c 1 google.com >/dev/null 2>&1; do
  sleep 1
  WaitSeconds=$((WaitSeconds+1))
  [ $WaitSeconds -gt 300 ] && logger -t system "$0: Warning: Router not online! Aborting after a wait of 5 minutes..." && exit 1
done
}

check_ipv6 () {
  ping6 -q -c 1 google.com >/dev/null 2>&1 && $1 || echo
}

get_list_source_ip () {
wget -q $iplist -O $path/ip.list
}

get_list_source_no () {
wget -q $nolist -O $path/no.list
}

get_list_source_wl () {
wget -q $wlfilter -O $path/whitelist.filter
}

list_source_update () {
bl_source_update
wl_source_update
}

bl_source_update () {
rm $path/ip.list
rm $path/no.list
get_list_source_ip
get_list_source_no
}

wl_source_update () {
rm $path/whitelist.filter
get_list_source_wl
}

get_lists () {
mkdir -p $path
if [ -f $path/ip.list ]; then echo; else get_list_source_ip; fi
if [ -f $path/no.list ]; then echo; else get_list_source_no; fi
logger -s -t uygroa updating adblock lists.
     wget -t 5 -q --show-progress -i $path/ip.list -O $path/ip.part
     wget -t 5 -q --show-progress -i $path/no.list -O $path/no.part
}

sort_lists () {
sort_list_ip4
check_ipv6 sort_list_ip6
}

sort_list_ip4 () {
cat $path/ip.part | grep -oE "$regexp_ip" | awk '{print "127.0.0.1    " $2}' | sed "s/127\.0\.0\.1/$pix_v4/" | sort -u >$path/ipv4.part
cat $path/no.part | grep -oE "$regexp_no"| awk '{print "127.0.0.1    " $1}'| sed "s/127\.0\.0\.1/$pix_v4/" | sort -u >>$path/ipv4.part
}

sort_list_ip6 () {
cat $path/ip.part | grep -oE "$regexp_ip" | awk '{print "127.0.0.1    " $2}' | sed "s/127\.0\.0\.1/$pix_v6/" | sort -u >$path/ipv6.part
cat $path/no.part | grep -oE "$regexp_no"| awk '{print "127.0.0.1    " $1}'| sed "s/127\.0\.0\.1/$pix_v6/" | sort -u >>$path/ipv6.part
}

make_hostfile () {
make_ipv4_hostfile
check_ipv6 make_ipv6_hostfile
}

make_ipv4_hostfile () {
  check_malware_blocking_ipv4
  check_privacy_blocking_ipv4
  run_whitelisting_ipv4
  if [[ -s $path/whitelist_v4.part ]];
    then grep -Fvxf $path/whitelist_v4.part $path/ipv4.part | tr '[A-Z]' '[a-z]' | sort -u > $path/ipv4_hosts;
  else cat $path/ipv4.part  | tr '[A-Z]' '[a-z]' | sort -u > $path/ipv4_hosts;
  fi
}

make_ipv6_hostfile () {
  check_malware_blocking_ipv6
  check_privacy_blocking_ipv6
  run_whitelisting_ipv6
  if [[ -s $path/whitelist_v6.part ]];
    then grep -Fvxf $path/whitelist_v6.part $path/ipv6.part | tr '[A-Z]' '[a-z]' | sort -u > $path/ipv6_hosts;
  else cat $path/ipv6.part  | tr '[A-Z]' '[a-z]' | sort -u > $path/ipv6_hosts;
  fi
}

check_malware_blocking_ipv4 () {
  if [ -s /jffs/malware-filter.blacklist ] && [ -s /jffs/scripts/malware-filter ];then
    logger -s -t uygroa "Removing malware-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/malware-filter.whitelist /jffs/malware-filter.blacklist | grep "^[^#;]" | sed 's/http[s]*:\/\///;s|\/.*||' | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v4    $line"; done > $path/whitelist_v4.part
  fi
}

check_privacy_blocking_ipv4 () {
  if [ -s /jffs/privacy-filter.blacklist ] && [ -s /jffs/scripts/privacy-filter ];then
    logger -s -t uygroa "Removing privacy-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/privacy-filter.whitelist /jffs/privacy-filter.blacklist | grep "^[^#;]" | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v4    $line"; done >> $path/whitelist_v4.part
  fi
}

run_whitelisting_ipv4 () {
if [[ $WHITELISTING = "enabled" ]]; then
    if [ -f $path/whitelist.filter ]; then echo; else get_list_source_wl; fi
    awk -F':' '{print $1}' $path/whitelist.filter | while read -r line; do echo "$pix_v4    $line"; done >> $path/whitelist_v4.part
  else
    logger -s -t uygroa Whitelisting disabled
  fi
}

check_malware_blocking_ipv6 () {
  if [ -s /jffs/malware-filter.blacklist ] && [ -s /jffs/scripts/malware-filter ];then
    logger -s -t uygroa "Removing malware-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/malware-filter.whitelist /jffs/malware-filter.blacklist | grep "^[^#;]" | sed 's/http[s]*:\/\///;s|\/.*||' | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v6    $line"; done > $path/whitelist_v6.part
  fi
}

check_privacy_blocking_ipv6 () {
  if [ -s /jffs/privacy-filter.blacklist ] && [ -s /jffs/scripts/privacy-filter ];then
    logger -s -t uygroa "Removing privacy-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/privacy-filter.whitelist /jffs/privacy-filter.blacklist | grep "^[^#;]" | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v6    $line"; done >> $path/whitelist_v6.part
  fi
}

run_whitelisting_ipv6 () {
if [[ $WHITELISTING = "enabled" ]]; then
    if [ -f $path/whitelist.filter ]; then echo; else get_list_source_wl; fi
    awk -F':' '{print $1}' $path/whitelist.filter | while read -r line; do echo "$pix_v6    $line"; done >> $path/whitelist_v6.part
  else
    logger -s -t uygroa Whitelisting disabled
  fi
}

cleanup () {
rm $path/*.part
chmod 666 $path/ipv4_hosts
if [ -f $path/ipv6_hosts ]; then chmod 666 $path/ipv6_hosts; fi
}

add_config () {

if [ ! -f $configuration ]; then touch $configuration; fi

case $(grep -oE 'OpenWrt' /proc/version) in
  OpenWrt) cp $path/ipv4_hosts /tmp/hosts/;
           if [ -f $path/ipv6_hosts ]; then cp $path/ipv6_hosts /tmp/hosts/;fi ;;
  *)       if grep -Fxq "addn-hosts=$path/ipv4_hosts" $configuration
           then logger -s -t uygroa ipv4_hosts is present in $configuration
           else echo "addn-hosts=$path/ipv4_hosts" >>$configuration
           logger -s -t uygroa ipv4_hosts is added to $configuration; fi
if [ -f $path/ipv6_hosts ]; then
    if grep -Fxq "addn-hosts=$path/ipv6_hosts" $configuration
    then logger -s -t uygroa ipv6_hosts is present in $configuration
    else echo "addn-hosts=$path/ipv6_hosts" >>$configuration
    logger -s -t uygroa ipv6_hosts is added to $configuration; fi; fi ;;
esac
}

dnsmasq_restart () {
case $(grep -oE 'merlin|padavan|OpenWrt' /proc/version) in
  merlin)    service restart_dnsmasq   ;;
  padavan)   kill -SIGTERM $(pidof dnsmasq) && /usr/sbin/dnsmasq   ;;
  OpenWrt)   /etc/init.d/dnsmasq restart   ;;
  *)         kill -SIGTERM $(pidof dnsmasq) && /usr/sbin/dnsmasq ;;
esac; logger -s -t uygroa reloaded dnsmasq to read in new hosts
}

summary () {
ipv4_total=$(cat $path/ipv4_hosts | wc -l)
if [ -f $path/ipv6_hosts ]; then ipv6_total=$(cat $path/ipv6_hosts | wc -l);fi
logger -s -t uygroa updated ipv4 adblock lists, $ipv4_total ads sites blocked
if [ -f $path/ipv6_hosts ]; then logger -s -t uygroa updated ipv6 adblock lists, $ipv6_total ads sites blocked; fi
}

clear_cache () {
rm $path/*
if grep -Fxq "addn-hosts=$path/ipv4_hosts" $configuration; then sed --in-place '/ipv4_hosts/d' $configuration; fi
if grep -Fxq "addn-hosts=$path/ipv6_hosts" $configuration; then sed --in-place '/ipv6_hosts/d' $configuration; fi
dnsmasq_restart
}

option="${1}"
case ${option} in
                -update) check_update ;;
                -version) show_version ;;
                -fetchall) list_source_update ;;
                -fetchbl) bl_source_update ;;
                -fetchwl) wl_source_update ;;
                -clearcache) clear_cache ;;
                *)
                #enable/disable here
                check_online
                get_lists
                sort_lists
                make_hostfile
                cleanup
                add_config
                dnsmasq_restart
                summary
                ;;
                esac
