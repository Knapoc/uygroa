#!/bin/sh
# uygroa
# Revision 10
# uygroa is a fork of ublockr (version 4) by Toast and Jacob Salmela (Pi-Hole) formerly published under GPL 3.0 https://www.snbforums.com/threads/ublockr-a-minimalists-approach-to-adblocking.31683/
# Licensed under GPL 3.0
# Script made for router supporting Entware

cfg=/opt/etc/uygroa.cfg                                               # edit this if you want your cfg in a different directory

if [ -f $cfg ]
    then logger -s -t uygroa "Reading uygroa config." >&2
    else logger -s -t uygroa "No configuration found. Exiting."
    exit 0
  fi

source $cfg

# SET VARIABLES
self=$(basename "$0")                                                 #uses the same name as the file
update_base=https://raw.githubusercontent.com/Knapoc/uygroa/master    #dont link directly to file link to the folder
update_self=${update_self:-1}
local_rev=$(grep -oE 'Revision\s[0-9]{1,3}' "$0" | awk '{ print $2 }')
online_rev=$(wget --no-check-certificate -q -O - "$update_base/$self" | grep -oE 'Revision\s[0-9]{1,3}' | awk '{print $2}')
pix_v4=$(ifconfig "$iface" | awk '/inet addr/{print substr($2,6)}')
pix_v6=$(ip addr show dev "$iface" | sed -e's/^.*inet6 \([^ ]*\)\/.*$/\1/;t;d')
regexp_ip='\b([0-9]{1,3}\.){3}[0-9]{1,3}\s+(([a-zA-Z0-9]+)(\-|\|_|\.)){1,8}[a-zA-Z]{2,4}((\.)[a-zA-Z]{2,4}){0,1}\b'
regexp_no='\b(([a-zA-Z0-9]+)(\-|\|_|\.)){1,8}[a-zA-Z]{2,4}((\.)[a-zA-Z]{2,4}){0,1}\b'
# END VARIABLES

run_self_updater () {
        logger -s -t uygroa-updater "Performing self-update to Version $online_rev."
if      ! wget --quiet --output-document="$0.tmp" "$update_base/$self" ;
then    logger -s -t uygroa-updater "Failed downloading new version!"
        logger -s -t uygroa-updater "File requested: $update_base/$self"
        exit 1
fi
OCTAL_MODE=$(stat -c '%a' "$0")
    case ${OCTAL_MODE:--1} in
        -[1] )          logger -s -t uygroa "Failed: Error : OCTAL_MODE was empty"; exit 1 ;;
        777|775|755 )   logger -s -t uygroa "OCTAL mode set:${OCTAL_MODE}" ;;
        * )             logger -s -t uygroa "Failed: Error in OCTAL_MODEs, found value=${OCTAL_MODE}" exit 1 ;;
    esac
if      ! chmod "$OCTAL_MODE" "$0".tmp ;
then    logger -s -t uygroa-updater "Error on chmod $OCTAL_MODE %0.tmp from $update_base/$self, can't continue"
        exit 1
fi
cat > /tmp/updatescript.sh << EOF
#!/bin/sh
if mv "$0.tmp" "$0";
then    logger -s -t uygroa-updater "Update complete."
        exec env update_self=0 /bin/sh "$0"
        rm \$0
else    logger -s -t uygroa-updater "Update failed."
fi
EOF
        echo "Inserting update process..."
            exec /bin/sh /tmp/updatescript.sh; rm /tmp/updatescript.sh
}

function_check_update () {
if [ "${update_self}" -ne 0 ] && [ "${online_rev}" -gt "${Revision}" ]
then run_self_updater
  else
    logger -s -t uygroa "No update needed. You're running version $local_rev. The latest online version is $online_rev."
fi }

# SET APPCHECK
if [ -z "$(which opkg)" ]; then logger -s -t uygroa "no package manager found"; exit 0; else
if [ -z "$(opkg list-installed | grep wget)" ]; then opkg install wget; fi
if [ -z "$(opkg list-installed | grep ca-certificates)" ]; then opkg install ca-certificates; fi
if [ -z "$(opkg list-installed | grep grep)" ]; then opkg install grep; fi
if [ -z "$(which stat)" ]; then opkg install coreutils-stat; fi

case $(grep -oE 'OpenWrt' /proc/version) in
  OpenWrt) ;;
  *) if [ -z "$(which pixelserv-tls)" ]; then opkg install pixelserv-tls; fi ;;
 esac; fi

 # END APPCHECK
case $(grep -oE 'merlin|padavan|OpenWrt' /proc/version) in
  merlin)    path=$asuswrt_path>&2; configuration=$asuswrt_dnsmasq >&2; iface=$nic ;;
  padavan)   path=$padavan_path >&2; configuration=$padavan_dnsmasq >&2; iface=$nic ;;
  OpenWrt)   path=$openwrt_path >&2; iface=$nic ;;
  *)         path=$other_path >&2; configuration=$other_dnsmasq >&2; iface=$nic ;;
esac

info_check_online () {
while ! ping -q -c 1 google.com >/dev/null 2>&1; do
  sleep 1
  WaitSeconds=$((WaitSeconds+1))
  [ $WaitSeconds -gt 300 ] && logger -t system "$0: Warning: Router not online! Aborting after a wait of 5 minutes..." && exit 1
done
}

info_check_ipv6 () {
  ping6 -q -c 1 google.com >/dev/null 2>&1 && $1 || echo
}

get_list_source_ip () {
wget -q "$iplist" -O "$path"/ip.list
}

get_list_source_no () {
wget -q "$nolist" -O "$path"/no.list
}

get_list_source_wl () {
wget -q "$wlfilter" -O "$path"/whitelist.filter
}



get_lists () {
mkdir -p "$path"
if [ -f "$path"/ip.list ]; then echo; else get_list_source_ip; fi
if [ -f "$path"/no.list ]; then echo; else get_list_source_no; fi
logger -s -t uygroa updating adblock lists.
     wget -t 5 -q --show-progress -i "$path"/ip.list -O "$path"/ip.part
     wget -t 5 -q --show-progress -i "$path"/no.list -O "$path"/no.part
}

function_sort_lists () {
run_sort_list_ip4
info_check_ipv6 run_sort_list_ip6
}

run_sort_list_ip4 () {
grep -oE "$regexp_ip" "$path"/ip.part | awk '{print "127.0.0.1    " $2}' | sed "s/127\\.0\\.0\\.1/$pix_v4/" | sort -u >"$path"/ipv4.part
grep -oE "$regexp_no" "$path"/no.part | awk '{print "127.0.0.1    " $1}'| sed "s/127\\.0\\.0\\.1/$pix_v4/" | sort -u >>"$path"/ipv4.part
}

run_sort_list_ip6 () {
grep -oE "$regexp_ip" "$path"/ip.part | awk '{print "127.0.0.1    " $2}' | sed "s/127\\.0\\.0\\.1/$pix_v6/" | sort -u >"$path"/ipv6.part
grep -oE "$regexp_no" "$path"/no.part | awk '{print "127.0.0.1    " $1}'| sed "s/127\\.0\\.0\\.1/$pix_v6/" | sort -u >>"$path"/ipv6.part
}

function_make_hostfile () {
run_make_ipv4_hostfile
info_check_ipv6 run_make_ipv6_hostfile
}

run_make_ipv4_hostfile () {
  run_check_malware_blocking_ipv4
  run_check_privacy_blocking_ipv4
  run_whitelisting_ipv4
  if [ -s "$path"/whitelist_v4.part ];
    then grep -Fvxf "$path"/whitelist_v4.part "$path"/ipv4.part | tr '[:upper:]' '[:lower:]' | sort -u > "$path"/ipv4_hosts;
  else < "$path"/ipv4.part tr '[:upper:]' '[:lower:]' | sort -u > "$path"/ipv4_hosts;
  fi
}

run_make_ipv6_hostfile () {
  run_check_malware_blocking_ipv6
  run_check_privacy_blocking_ipv6
  run_whitelisting_ipv6
  if [ -s "$path"/whitelist_v6.part ];
    then grep -Fvxf "$path"/whitelist_v6.part "$path"/ipv6.part | tr '[:upper:]' '[:lower:]' | sort -u > "$path"/ipv6_hosts;
  else < "$path"/ipv6.part tr '[:upper:]' '[:lower:]' | sort -u > "$path"/ipv6_hosts;
  fi
}

run_check_malware_blocking_ipv4 () {
  if [ -s /jffs/malware-filter.blacklist ] && [ -s /jffs/scripts/malware-filter ];then
    logger -s -t uygroa "Removing malware-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/malware-filter.whitelist /jffs/malware-filter.blacklist | grep "^[^#;]" | sed 's/http[s]*:\/\///;s|\/.*||' | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v4    $line"; done > "$path"/whitelist_v4.part
  fi
}

run_check_privacy_blocking_ipv4 () {
  if [ -s /jffs/privacy-filter.blacklist ] && [ -s /jffs/scripts/privacy-filter ];then
    logger -s -t uygroa "Removing privacy-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/privacy-filter.whitelist /jffs/privacy-filter.blacklist | grep "^[^#;]" | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v4    $line"; done >> "$path"/whitelist_v4.part
  fi
}

run_whitelisting_ipv4 () {
if [ "$WHITELISTING" = "enabled" ]; then
    if [ -f "$path"/whitelist.filter ]; then echo; else get_list_source_wl; fi
    awk -F':' '{print $1}' "$path"/whitelist.filter | while read -r line; do echo "$pix_v4    $line"; done >> "$path"/whitelist_v4.part
  else
    logger -s -t uygroa Whitelisting disabled
  fi
}

run_check_malware_blocking_ipv6 () {
  if [ -s /jffs/malware-filter.blacklist ] && [ -s /jffs/scripts/malware-filter ];then
    logger -s -t uygroa "Removing malware-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/malware-filter.whitelist /jffs/malware-filter.blacklist | grep "^[^#;]" | sed 's/http[s]*:\/\///;s|\/.*||' | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v6    $line"; done > "$path"/whitelist_v6.part
  fi
}

run_check_privacy_blocking_ipv6 () {
  if [ -s /jffs/privacy-filter.blacklist ] && [ -s /jffs/scripts/privacy-filter ];then
    logger -s -t uygroa "Removing privacy-filter entries in blocking file, list is in use"
    grep -Fvxf /jffs/privacy-filter.whitelist /jffs/privacy-filter.blacklist | grep "^[^#;]" | sed -e 's/^//; s/$//' | while read -r line; do echo "$pix_v6    $line"; done >> "$path"/whitelist_v6.part
  fi
}

run_whitelisting_ipv6 () {
if [ "$WHITELISTING" = "enabled" ]; then
    if [ -f "$path"/whitelist.filter ]; then echo; else get_list_source_wl; fi
    awk -F':' '{print $1}' "$path"/whitelist.filter | while read -r line; do echo "$pix_v6    $line"; done >> "$path"/whitelist_v6.part
  else
    logger -s -t uygroa Whitelisting disabled
  fi
}

function_cleanup () {
rm "$path"/*.part
chmod 666 "$path"/ipv4_hosts
if [ -f "$path"/ipv6_hosts ]; then chmod 666 "$path"/ipv6_hosts; fi
}

function_add_config () {

if [ ! -f "$configuration" ]; then touch "$configuration"; fi

case $(grep -oE 'OpenWrt' /proc/version) in
  OpenWrt) cp "$path"/ipv4_hosts /tmp/hosts/;
           if [ -f "$path"/ipv6_hosts ]; then cp "$path"/ipv6_hosts /tmp/hosts/;fi ;;
  *)       if grep -Fxq "addn-hosts=$path/ipv4_hosts" "$configuration"
           then logger -s -t uygroa ipv4_hosts is present in "$configuration"
           else echo "addn-hosts=$path/ipv4_hosts" >>"$configuration"
           logger -s -t uygroa ipv4_hosts is added to "$configuration"; fi
if [ -f "$path"/ipv6_hosts ]; then
    if grep -Fxq "addn-hosts=$path/ipv6_hosts" "$configuration"
    then logger -s -t uygroa ipv6_hosts is present in "$configuration"
    else echo "addn-hosts=$path/ipv6_hosts" >>"$configuration"
    logger -s -t uygroa ipv6_hosts is added to "$configuration"; fi; fi ;;
esac
}

function_dnsmasq_restart () {
case $(grep -oE 'merlin|padavan|OpenWrt' /proc/version) in
  merlin)    service restart_dnsmasq   ;;
  padavan)   kill -SIGTERM "$(pidof dnsmasq)" && /usr/sbin/dnsmasq   ;;
  OpenWrt)   /etc/init.d/dnsmasq restart   ;;
  *)         kill -SIGTERM "$(pidof dnsmasq)" && /usr/sbin/dnsmasq ;;
esac; logger -s -t uygroa reloaded dnsmasq to read in new hosts
}

function_summary () {
ipv4_total=$(< "$path"/ipv4_hosts wc -l)
if [ -f "$path"/ipv6_hosts ]; then ipv6_total=$(< "$path"/ipv6_hosts wc -l);fi
logger -s -t uygroa updated ipv4 adblock lists, "$ipv4_total" ads sites blocked
if [ -f "$path"/ipv6_hosts ]; then logger -s -t uygroa updated ipv6 adblock lists, "$ipv6_total" ads sites blocked; fi
}

info_show_version () {
echo "your current version is $local_rev"
}

function_list_source_update () {
function_bl_source_update
function_wl_source_update
}

function_bl_source_update () {
rm "$path"/ip.list
rm "$path"/no.list
get_list_source_ip
get_list_source_no
}

function_wl_source_update () {
rm "$path"/whitelist.filter
get_list_source_wl
}

function_clear_cache () {
rm "$path"/*
if grep -Fxq "addn-hosts=$path/ipv4_hosts" "$configuration"; then sed --in-place '/ipv4_hosts/d' "$configuration"; fi
if grep -Fxq "addn-hosts=$path/ipv6_hosts" "$configuration"; then sed --in-place '/ipv6_hosts/d' "$configuration"; fi
function_dnsmasq_restart
}


option="${1}"
case ${option} in
                -version)     info_show_version ;;
                -update)      function_check_update ;;
                -fetchall)    function_list_source_update ;;
                -fetchbl)     function_bl_source_update ;;
                -fetchwl)     function_wl_source_update ;;
                -clearcache)  function_clear_cache ;;
                *)            #enable/disable here
                              info_check_online
                              get_lists
                              function_sort_lists
                              function_make_hostfile
                              function_cleanup
                              function_add_config
                              function_dnsmasq_restart
                              function_summary ;;
                esac
